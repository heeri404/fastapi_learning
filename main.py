from fastapi import FastAPI
import pandas as pd
import numpy as np
# app = FastAPI()

# @app.get("/")
# async def root():
#     return {"message": "Hello World"}

import requests
import json
import bittensor
import uvicorn

# models.Base.metadata.create_all(bind=engine)


app = FastAPI()

@app.get('/taodata')

# def tao_data():
#     data = requests.get('https://taostats.io/data.json')
#     data = data.json()
#     data = data[0]
#     # total_supply = data[0]['total_supply']
#     return data

def get_all_delegates():

    # -- coding: utf-8 --
    """Copy of tao_minning_shaukat.ipynb

    Automatically generated by Colaboratory.

    Original file is located at
        https://colab.research.google.com/drive/1jzG6JA2d5UA_iR5O0YnOnU2a546O-aKR
    """

    subtensor = bittensor.subtensor()

    url = "https://raw.githubusercontent.com/opentensor/bittensor-delegates/master/public/delegates.json"

    response = requests.get(url)

    # Check if the request was successful
    if response.status_code == 200:
        data1 = response.json()

    # Assuming the data variable still holds the JSON
    data_list = []

    for key, value in data1.items():
        data_list.append([key, value['name'], value['url'],
                          value['description'], value['signature']])

    # Convert the list of lists to DataFrame
    columns = ["key", "name", "url", "description", "signature"]
    df = pd.DataFrame(data_list, columns=columns)

    df

    # Excel row Get block number 24
    block = subtensor.get_current_block()
    block

     # # Excel row number 25
    # balances = subtensor.get_balances()
    # # Removing τ and converting values to float row number 25 in excel
    # converted_balances = {k: float(str(v).replace("τ", "").replace(",", "")) for k, v in balances.items()}
    # count = sum(1 for value in converted_balances.values() if value >= 0.1)
    # count

    """# Get List of all validators and information"""

    all_delegates = subtensor.get_delegates()

    """Total stake"""

    total_stake_sum = sum(
        delegate_info.total_stake for delegate_info in all_delegates)
    # Convert the Balance object to a string
    total_stake_str = str(total_stake_sum)

    # Remove unwanted characters
    cleaned_total_stake_str = total_stake_str.replace("τ", "").replace(",", "")
    # Convert to a float
    total_stake_float = float(cleaned_total_stake_str)

    """nominators
    
    """

    nominators_count_list = [len(delegate_info.nominators)
                             for delegate_info in all_delegates]

    """Each validator stake"""

    total_stake_list = [
        delegate_info.total_stake for delegate_info in all_delegates]
    len(total_stake_list)

    """Validators_APY"""

    validators_apy = (3600 * 365 / total_stake_float) * 100
    validators_apy

    staking_apy = validators_apy - (0.18 * validators_apy)
    staking_apy
    # Step 1: Create a dictionary with each of the desired columns
    data_dict = {
        'hot_key': [delegate_info.hotkey_ss58 for delegate_info in all_delegates],
        'nominators': nominators_count_list,
        'total_stake': total_stake_list,
        # Broadcasting the same value to all rows
        'apy': [staking_apy for _ in all_delegates]
    }

    # Step 2: Use this dictionary to construct the DataFrame
    del_df = pd.DataFrame(data_dict)

    # Step 3: Add the 'benefits' column with the condition
    del_df['benefits'] = ''  # Initialize the column with empty strings

    # Defining the benefits string
    benefits_string = "Increase your apy to 29.64% by holding 3 neurons. Boost your APY to {} by purchasing 3 Neurons, details on FirstTensor website".format(
        validators_apy)

    # Update the 'benefits' column where 'hot_key' has the specified value
    hot_key_value = "5DvTpiniW9s3APmHRYn8FroUWyfnLtrsid5Mtn5EwMXHN2ed"
    del_df.loc[del_df['hot_key'] == hot_key_value,
               'benefits'] = benefits_string

    # Filter rows in del_df based on df's 'key'
    filtered_del_df = del_df[del_df['hot_key'].isin(df['key'])]
    # Merge the dataframes side by side based on keys
    result_df = pd.merge(df, filtered_del_df, left_on='key',
                         right_on='hot_key', how='left').drop(columns='hot_key')
    result_df['nominators'].fillna(0, inplace=True)
    result_df = result_df.fillna('')
    # result_df.to_csv("test.csv",index=False)
    return result_df.to_dict()

if __name__ == "__main__":
    uvicorn.run(app, host="localhost", port=8000)